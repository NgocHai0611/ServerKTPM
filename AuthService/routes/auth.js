const express = require("express");
const jwt = require("jsonwebtoken");
const User = require("../models/users");
const router = express.Router();
const bcrypt = require("bcryptjs");
const cloudinary = require("cloudinary").v2;
const multer = require("multer");
const path = require("path");
require("dotenv").config();
const rateLimit = require("express-rate-limit");
let pRetry;
(async () => {
  const module = await import("p-retry");
  pRetry = module.default;
})();

// üëÆ‚Äç‚ôÇÔ∏è T·∫°o limiter cho route /login
const loginLimiter = rateLimit({
  windowMs: 10 * 1000, // 10 gi√¢y
  max: 2, // Ch·ªâ cho ph√©p 2 request trong kho·∫£ng th·ªùi gian
  standardHeaders: true, // G·ª≠i headers hi·ªán ƒë·∫°i
  legacyHeaders: false, // Kh√¥ng c·∫ßn headers c≈©
  message: {
    error:
      "üö´ Too many login attempts. Please wait a few seconds before trying again.",
  },
  skipSuccessfulRequests: false, // ‚ö†Ô∏è T√≠nh c·∫£ request ƒë√∫ng l·∫´n sai!
});

// Get Users (Demo)
const getUserLimit = rateLimit({
  windowMs: 10 * 1000, // 10 gi√¢y
  max: 2, // Ch·ªâ cho ph√©p 2 request trong kho·∫£ng th·ªùi gian
  standardHeaders: true, // G·ª≠i headers hi·ªán ƒë·∫°i
  legacyHeaders: false, // Kh√¥ng c·∫ßn headers c≈©
  message: {
    error: "üö´ Too many request to get .",
  },
  skipSuccessfulRequests: false, // ‚ö†Ô∏è T√≠nh c·∫£ request ƒë√∫ng l·∫´n sai!
});

// C·∫•u h√¨nh Cloudinary t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME || "dioycsndv",
  api_key: process.env.CLOUDINARY_API_KEY || "386921452882728",
  api_secret:
    process.env.CLOUDINARY_API_SECRET || "dRrvRJBEIJux55tAGjOYrJ4n_KY",
});

// C·∫•u h√¨nh Multer ƒë·ªÉ x·ª≠ l√Ω file upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/"); // Th∆∞ m·ª•c t·∫°m ƒë·ªÉ l∆∞u file
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png/;
    const extname = filetypes.test(
      path.extname(file.originalname).toLowerCase()
    );
    const mimetype = filetypes.test(file.mimetype);
    if (extname && mimetype) {
      return cb(null, true);
    }
    cb(new Error("Only images (jpeg, jpg, png) are allowed"));
  },
  limits: { fileSize: 5 * 1024 * 1024 }, // Gi·ªõi h·∫°n 5MB
});

// Middleware x√°c th·ª±c token
const authMiddleware = (req, res, next) => {
  const token = req.header("Authorization")?.replace("Bearer ", "");
  if (!token) {
    return res.status(401).send({ error: "Please authenticate." });
  }
  try {
    const decoded = jwt.verify(
      token,
      process.env.JWT_SECRET || "defaultsecret"
    );
    req.userId = decoded.userId;
    next();
  } catch (err) {
    res.status(401).send({ error: "Invalid token." });
  }
};

// Login route
router.post("/login", loginLimiter, async (req, res) => {
  const { email, password } = req.body;
  console.log("üîê Login attempt:", email);

  try {
    const user = await User.findOne({ email: email.trim() });

    if (!user) {
      console.warn("‚ùå User not found:", email);
      return res.status(400).send({ error: "User does not exist." });
    }

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      console.warn("‚ùå Invalid password for:", email);
      return res.status(400).send({ error: "Invalid password." });
    }

    const token = jwt.sign(
      { userId: user._id },
      process.env.JWT_SECRET || "defaultsecret",
      { expiresIn: "1h" }
    );

    console.log("‚úÖ Login successful:", email);
    res.send({
      token,
      user: {
        id: user._id,
        email: user.email,
        isAdmin: user.isAdmin,
        name: user.name,
        pic: user.pic,
      },
    });
  } catch (err) {
    console.error("üí• Error during login:", err);
    res.status(500).send({ error: "Internal server error." });
  }
});

router.post("/register", async (req, res) => {
  const { name, email, password, pic } = req.body;

  if (!name || !email || !password) {
    return res.status(400).send({ error: "All fields are required." });
  }

  try {
    const existingUser = await User.findOne({ $or: [{ email }, { name }] });
    if (existingUser) {
      return res.status(400).send({ error: "Name or email already exists." });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      name,
      email,
      password: hashedPassword,
      pic: pic || "assets/avatar_default/default_avatar.jpg",
    });

    await newUser.save();
    res.status(201).send({ message: "User registered successfully." });
  } catch (err) {
    console.error("Error during registration:", err);
    res.status(500).send({ error: "Internal server error." });
  }
});

// L·∫•y Th√¥ng Tin User C·ªßa T·∫•t C·∫£ User Tr·ª´ M·∫≠t Kh·∫©u
// L·∫•y Th√¥ng Tin User C·ªßa T·∫•t C·∫£ User Tr·ª´ M·∫≠t Kh·∫©u
router.get("/getAllUser", getUserLimit, async (req, res) => {
  let hasShownRetryMsg = false;

  try {
    const users = await pRetry(
      async () => {
        try {
          // Th·ª≠ l·∫•y d·ªØ li·ªáu users
          const users = await User.find({}, "-password");
          return users;
        } catch (err) {
          if (!hasShownRetryMsg) {
            hasShownRetryMsg = true;
            console.log("‚ö†Ô∏è C√≥ 1 ch√∫t s·ª± c·ªë vui l√≤ng ƒë·ª£i...");
            // B·∫°n c√≥ th·ªÉ g·ª≠i header custom ho·∫∑c log ƒë·ªÉ client nh·∫≠n bi·∫øt
            // V√≠ d·ª•: res.setHeader('X-Retry-Message', 'C√≥ 1 ch√∫t s·ª± c·ªë vui l√≤ng ƒë·ª£i...');
          }
          throw err; // ƒê·ªÉ pRetry x·ª≠ l√Ω retry ti·∫øp
        }
      },
      {
        retries: 5,
        minTimeout: 3000, // 3 gi√¢y gi·ªØa c√°c l·∫ßn retry
        onFailedAttempt: (error) => {
          console.log(
            `‚ùó Retry attempt #${error.attemptNumber}: ${error.message}`
          );
        },
      }
    );
    // N·∫øu th√†nh c√¥ng, tr·∫£ data
    res.json(users);
  } catch (error) {
    // Retry v∆∞·ª£t qu√° 5 l·∫ßn ho·∫∑c l·ªói kh√°c
    res.status(500).json({ error: "Server ƒëang b·ªã l·ªói, quay l·∫°i sau" });
  }
});
// Get all users (excluding password)
router.get("/getAllUser", async (req, res) => {
  try {
    const users = await User.find({}, "-password");

    res.json(users);
  } catch (error) {
    // Retry v∆∞·ª£t qu√° 5 l·∫ßn ho·∫∑c l·ªói kh√°c
    res.status(500).json({ error: "Server ƒëang b·ªã l·ªói, quay l·∫°i sau" });
  }
});

// Grant admin role
router.put("/grant-admin/:id", async (req, res) => {
  try {
    const userId = req.params.id;
    const user = await User.findByIdAndUpdate(
      userId,
      { isAdmin: true },
      { new: true }
    );

    if (!user) return res.status(404).json({ message: "User not found" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: "Server error", error });
  }
});

// Update user profile
router.put(
  "/update/:id",
  authMiddleware,
  upload.single("pic"),
  async (req, res) => {
    const userId = req.params.id;
    const { name, email, password } = req.body;

    if (req.userId !== userId) {
      return res
        .status(403)
        .send({ error: "You can only update your own profile." });
    }

    try {
      const updateData = {};
      if (name) updateData.name = name;
      if (email) {
        // Ki·ªÉm tra email c√≥ tr√πng v·ªõi user kh√°c kh√¥ng
        const existingEmail = await User.findOne({
          email,
          _id: { $ne: userId },
        });
        if (existingEmail) {
          return res.status(400).send({ error: "Email already exists." });
        }
        updateData.email = email;
      }
      if (password) updateData.password = await bcrypt.hash(password, 10);

      // N·∫øu c√≥ file ·∫£nh ƒë∆∞·ª£c g·ª≠i l√™n
      if (req.file) {
        try {
          const uploadResult = await cloudinary.uploader.upload(req.file.path, {
            folder: "user_avatars",
            public_id: `avatar_${userId}`,
            overwrite: true,
          });
          updateData.pic = uploadResult.secure_url;
        } catch (error) {
          console.error("Cloudinary upload error:", error);
          return res.status(500).send({ error: "Failed to upload image." });
        }
      }

      const updatedUser = await User.findByIdAndUpdate(
        userId,
        { $set: updateData },
        { new: true, runValidators: true }
      ).select("-password");

      if (!updatedUser) {
        return res.status(404).send({ error: "User not found." });
      }

      res.send({
        user: {
          id: updatedUser._id,
          name: updatedUser.name,
          email: updatedUser.email,
          pic: updatedUser.pic,
          isAdmin: updatedUser.isAdmin,
        },
      });
    } catch (err) {
      console.error("Error updating user:", err);
      res.status(500).send({ error: "Internal server error." });
    }
  }
);

module.exports = router;
